; ====================  CONSTANTS  =============================================

; EECANBTR0 (EECANBAUD+0): SJW = 1...4 Tq, Prescaler value = 1...64.
; EECANBTR1 (EECANBAUD+1): Sample per bit = 1 or 3, Tseg2 = 1...8 Tq, Tseg1 = 1...16 Tq
; Baud = fCANCLK / Prescaler / (1 + Tseg1 + Tseg2)
; Sample point = (1 + Tseg1)/(1 + Tseg1 + Tseg2)
EECANBAUD       def     $17E8   ; CAN BaudRate settings in EEPROM, same with bootloader

; ====================  VARIABLES  =============================================
#RAM

can_ptr         ds      1       ; Pointer for read data from sci_buffer to CAN

; ===================== SUB-ROUTINES ===========================================
#ROM

;can_config      ; Config in EEPROM.
;        org     EECANBAUD
;        db      $00,$3A         ; Baud = 16MHz / 1 / (1+11+4) = 1M. Sample point = (1+11)/(1+11+4) = 87.5%
;        db      $01,$3A         ; Baud = 16MHz / 2 / (1+11+4) = 500k. Sample point = (1+11)/(1+11+4) = 87.5%
;        db      $03,$3A         ; Baud = 16MHz / 4 / (1+11+4) = 250k. Sample point = (1+11)/(1+11+4) = 87.5%
;        db      $07,$3A         ; Baud = 16MHz / 8 / (1+11+4) = 125k. Sample point = (1+11)/(1+11+4) = 87.5%
;        org     can_config

; ------------------------------------------------------------------------------
; Freescale Controller Area Network (S08MSCANV1)
; Set up CAN using 16 MHz bus clock
; CAN will use in interrupt mode, but init does not enable interrupt.
; It will be enabled when transmission can be started, so when
; all bytes have been received from SCI.
CAN_Init
        ; MSCAN Enable, CLKSRC=1 use BusClk(16MHz), BORM=0 auto busoff recovery, SLPAK=0 no sleep
        lda     #CAN_CANE_|CAN_CLKSRC_
        sta     CANCTL1

        jsr     CAN_EnterInit

        ais     #-2             ; Reserve two bytes in stack for baud rate bytes 

        ; Check two bytes in EEPROM. If any has value $FF, both to be forced to valid 500kbaud value.
        clrx
        lda     EECANBAUD+0     ; Read value from EEPROM
        sta     1,sp            ; Save value for later use
        coma                    ; convert $FF to $00
        bne     can_btr_0_ok    ; jump id not zero, fo value is not $FF
        incx                    ; Count number of $FF value in X 
can_btr_0_ok
        lda     EECANBAUD+1     ; Read value from EEPROM
        sta     2,sp            ; Save value for later use
        coma                    ; convert $FF to $00
        bne     can_btr_1_ok    ; jump id not zero, fo value is not $FF
        incx                    ; Count number of $FF value in X 
can_btr_1_ok
        tstx                    ; update CCR with value of X
        beq     can_btr_ok      ; jump if there was no $FF value in EEPROM
        lda     #$01            ; Default 500kbaud value 
        sta     1,sp 
        lda     #$3A            ; Default 500kbaud value 
        sta     2,sp
can_btr_ok
        bne     can_btr_0_ok
        clra                    ; Default 500kbaud value 

        ; SJW = 1...4 Tq, Prescaler value = 1...64
        lda     1,sp
        sta     CANBTR0
        
        ; One sample per bit, Tseg2 = 1...8 Tq, Tseg1 = 1...16 Tq
        lda     2,sp
        sta     CANBTR1

        ais     #2              ; Free up two baud rate bytes from stack  

        ; Leave Initialization Mode
        bsr	CAN_ExitInit

        ; Send info message

        ; Select first buffer
        lda     #1
        sta     CANTBSEL

        ; Set ID
        lda     #$FF
        sta     CANTIDR0
        sta     CANTIDR1        ; Set IDE and SRR
        sta     CANTIDR2
        and     #$FE            ; Clear RTR bit
        sta     CANTIDR3
        
        ; Set message data
        lda     #APPLICATION
        sta     CANTDSR0
        lda     #SW_REV
        sta     CANTDSR1
        lda     #BUILD_DATE_YH
        sta     CANTDSR2
        lda     #BUILD_DATE_YL
        sta     CANTDSR3
        lda     #BUILD_DATE_MO
        sta     CANTDSR4
        lda     #BUILD_DATE_DA
        sta     CANTDSR5
        lda     #BUILD_DATE_HO
        sta     CANTDSR6
        lda     #BUILD_DATE_MI
        sta     CANTDSR7

        ; Set data length
        lda     #8
        sta     CANTDLR

        ; Transmit the message
        lda     CANTBSEL
        sta     CANTFLG

        rts

CAN_EnterInit
        ; Request init mode
        lda     #CAN_INITRQ_
        sta     CANCTL0
CAN_ChkEnterInit
        ; Wait for Initialization Mode Acknowledge
        lda     CANCTL1
        and     #CAN_INITAK_
        beq     CAN_ChkEnterInit
        rts

CAN_ExitInit
        ; Leave Initialization Mode
        clra
        sta     CANCTL0
CAN_ChkExitInit			; Wait for exit Initialization Mode Acknowledge
        lda     CANCTL1
        and     #CAN_INITAK_
        bne     CAN_ChkExitInit
        rts


; CAN Tx interrupt service routine. This will send automatic all 20 messages in
; burst. When last message was transmitted, interrupt disables itself to stop
; transmission.
CAN_TX_IT
#ifdef OSCILL_SUPP
        bset    OSC_CANIT.,OSC_CANIT ; Set debug measure pin
#endif        
        ; Save H, because it will be used but not saved by CPU.
        pshh
        
        ; Set index register
        clrh
        ldx     can_ptr
        
        ; Select first buffer
        lda     #1
        sta     CANTBSEL
        
        ; Set ID
        stx     CANTIDR0        ; byte pointer is ID
        clra
        sta     CANTIDR1
        sta     CANTIDR2
        sta     CANTIDR3
        
        ; Set message data
        lda     sci_buffer+0,x
        sta     CANTDSR0
        lda     sci_buffer+1,x
        sta     CANTDSR1
        lda     sci_buffer+2,x
        sta     CANTDSR2
        lda     sci_buffer+3,x
        sta     CANTDSR3
        lda     sci_buffer+4,x
        sta     CANTDSR4
        lda     sci_buffer+5,x
        sta     CANTDSR5
        lda     sci_buffer+6,x
        sta     CANTDSR6
        lda     sci_buffer+7,x
        sta     CANTDSR7

        ; Set data length
        lda     #8
        sta     CANTDLR

        ; Transmit the message
        lda     CANTBSEL
        sta     CANTFLG
        
        ; Select next message
        lda     can_ptr
        add     #10
        sta     can_ptr
        ; Check if last message was sent
        cmp     sci_nob
        blo     CAN_TX_IT_1
        ; Disable interrupt to stop CAN transmission
        lda     #0
        sta     CANTIER
        bset    CANSENT_REQ.,led_flags      ; Notify successfully sent CAN messages
#ifdef OSCILL_SUPP
        bclr    OSC_CANTX.,OSC_CANTX ; Clear debug measure pin
#endif
CAN_TX_IT_1
        
        ; Resore H before return from interrupt
        pulh
#ifdef OSCILL_SUPP
        bclr    OSC_CANIT.,OSC_CANIT ; Clear debug measure pin
#endif
        rti


; ===================== IT VECTORS =============================================
#VECTORS
        
        org     Vcantx
        dw      CAN_TX_IT
        

